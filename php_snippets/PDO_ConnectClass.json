{
  "pdo": {
    "prefix": "pdo",
    "body": [
      "class Database {",
        "private $host = '';",
        "private $user = '';",
        "private $pass = '';",
        "private $dbName = '';",
        "private $dbh, $err, $stmt;",
        "public function __construct() {",
            "// set dsn",
            "$dsn = 'mysql:host=' . $this->host . ';dbname=' . $this->dbName;",
            "//set options",
            "$options = array(",
                "PDO::ATTR_PERSISTENT => true,",
               " PDO::ATTR_ERRMODE    => PDO::ERRMODE_EXCEPTION",
            ");",
            
            "//create new pdo",
            "try {",
                "$this->dbh = new PDO($dsn, $this->user, $this->pass, $options);",
            "}",
            "catch(PDOEception $e) {",
                "$this->err = $e->getMessage();",
            "}",
        "}",
        "// function for performing queries",
        "public function query($query) {",
            "$this->stmt = $this->dbh->prepare($query);",
        "}",
        "// function to bind values to our query",
        "public function bind($param, $value, $type = null) {",
            "if($type == null) {",
                "switch(true) {",
                    "case is_int($value):", 
                        "$type = PDO::PARAM_INT;",
                       " break;",
                    "case is_bool($value):", 
                        "$type = PDO::PARAM_BOOL;",
                        "break;",
                    "case is_null($value):" ,
                        "$type = PDO::PARAM_NULL;",
                        "break;",
                    "default:",
                        "$type = PDO::PARAM_STR;",
                "}",
            "}",
            "$this->stmt->bindValue($param, $value, $type);",
        "}",
        "// Execute the query",
        "public function execute() {",
            "return $this->stmt->execute();",
        "}",
        "// Get last inserted ID",
       " public function lastInsertId() {",
           " $this->dbh->lastInsertId();",
        "}",
        "// get results",
        "public function resultset() {",
            "$this->execute();",
            "return $this->stmt->fetchAll(PDO::FETCH_OBJ);",
        "}",
     "}"  
    ]
  }
}